<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DbConnector.Core</name>
    </assembly>
    <members>
        <member name="T:DbConnector.Core.DbConnector`1">
            <summary>
            A performance-driven and ADO.NET data provider-agnostic ORM library.
            <para>Note: This class should be used as a singleton for optimal performance.</para>
            </summary>
            <typeparam name="TDbConnection">The <see cref="T:System.Data.Common.DbConnection"/> type to use.</typeparam>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``2(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>       
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``3(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>    
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``4(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>          
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``5(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>                 
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``6(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>                        
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``7(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>                        
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``8(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>                        
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``8(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``8(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``7(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``7(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``6(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``6(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``5(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``5(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``4(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``4(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``3(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``3(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``2(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``2(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``2(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``3(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``4(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``5(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``6(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``7(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``8(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``2(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``3(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``4(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``5(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``6(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``7(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``8(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``8(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``8(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``7(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``7(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``6(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``6(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``5(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``5(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``4(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``4(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``3(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``3(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``2(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``2(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``8(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``8(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``7(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``7(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``6(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``6(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``5(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``5(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``4(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``4(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``3(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``3(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``2(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``2(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``2(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>       
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``3(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>       
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``4(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>       
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``5(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>       
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``6(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>       
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``7(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>       
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``8(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>       
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``8(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``8(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``7(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``7(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``6(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``6(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``5(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``5(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``4(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``4(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``3(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``3(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``2(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``2(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``2(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``3(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``4(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``5(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``6(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``7(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``8(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``2(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``3(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``4(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``5(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``6(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``7(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``8(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``8(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``8(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``7(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``7(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``6(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``6(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``5(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``5(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``4(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``4(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``3(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``3(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``2(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``2(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``8(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``8(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``7(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``7(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``6(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``6(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``5(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``5(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``4(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``4(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``3(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``3(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``2(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``2(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.#ctor(System.String)">
            <summary>
            A generic database connector and lightweight ORM.
            <para>Note: This class should be used as a singleton for optimal performance.</para>
            </summary>
            <param name="connectionString"> The connection string to use.</param>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.#ctor(System.String,DbConnector.Core.DbConnectorFlags)">
            <summary>
            A generic database connector and lightweight ORM.
            <para>Note: This class should be used as a singleton for optimal performance.</para>
            </summary>
            <param name="connectionString"> The connection string to use.</param>
            <param name="flags">The <see cref="T:DbConnector.Core.DbConnectorFlags"/> to use.</param>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.#ctor(System.String,DbConnector.Core.IDbConnectorLogger)">
            <summary>
            A generic database connector and lightweight ORM.
            <para>Note: This class should be used as a singleton for optimal performance.</para>
            </summary>
            <param name="connectionString"> The connection string to use.</param>
            <param name="logger">The <see cref="T:DbConnector.Core.IDbConnectorLogger"/> to use for error logging.</param>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.#ctor(System.String,DbConnector.Core.IDbConnectorLogger,DbConnector.Core.DbConnectorFlags)">
            <summary>
            A generic database connector and lightweight ORM.
            <para>Note: This class should be used as a singleton for optimal performance.</para>
            </summary>
            <param name="connectionString"> The connection string to use.</param>
            <param name="logger">The <see cref="T:DbConnector.Core.IDbConnectorLogger"/> to use for error logging.</param>
            <param name="flags">The <see cref="T:DbConnector.Core.DbConnectorFlags"/> to use.</param>
        </member>
        <member name="P:DbConnector.Core.DbConnector`1.ConnectionString">
            <summary>
            Gets the string used to open the connection.
            </summary>
        </member>
        <member name="P:DbConnector.Core.DbConnector`1.ConnectionType">
            <summary>
            Gets the type of <see cref="T:System.Data.Common.DbConnection"/> being used.
            </summary>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;T&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;T&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;T&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;List&lt;T&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToDataTable(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;System.Data.DataTable&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;System.Data.DataTable&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToDataSet(System.Action{System.Collections.Generic.Queue{System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;System.Data.DataSet&gt;"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <param name="onInit">Action that is used to configure and enqueue all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>  
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;System.Data.DataSet&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToHashSet``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;HashSet&lt;T&gt;&gt;"/> able to read the first column of each row from the query result based on the <paramref name="onInit"/> action. All other columns are ignored.</para>
             <para>Valid <typeparamref name="T"/> types: any .NET built-in type or ADO.NET data provider supported type.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default. <see cref="T:System.DBNull"/> values will be excluded.
            </remarks>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="!:IDbJob&lt;HashSet&lt;T&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is not supported.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToKeyValuePairs(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>This is usefull when requiring a generic data list from the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToDictionaries(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.
             This is usefull when requiring a non-concrete data list from unique columns of the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToListOfKeyValuePairs(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>This is usefull when requiring a generic data list from the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="!:IDbJob&lt;List&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToListOfDictionaries(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.
             This is usefull when requiring a non-concrete data list from unique columns of the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;List&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToDbCollectionSet(System.Action{System.Collections.Generic.Queue{System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>This is usefull when wanting to create a concrete object from multiple/different queries.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <param name="onInit">Action that is used to configure and enqueue all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>    
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadTo``1(System.Action{System.Collections.Generic.Queue{System.Action{DbConnector.Core.IDbJobCommand}}},System.Func{``0,DbConnector.Core.IDbExecutionModel,System.Data.Common.DbDataReader,``0})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to load the data based on the <paramref name="onLoad"/> action.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="onInit">Action that is used to configure and enqueue all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <param name="onLoad">Function that is used to access the generated <see cref="T:System.Data.Common.DbDataReader"/> and transform the <typeparamref name="T"/> result.</param>        
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when onLoad is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Scalar``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> to get the first column of the first row from the result
             set returned by the query. All other columns and rows are ignored.</para>
             <para>Valid <typeparamref name="T"/> types: any .NET built-in type or ADO.NET data provider supported type.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is not supported.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.NonQuery(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;int?&gt;"/> able to execute a non-query based on the <paramref name="onInit"/> action.</para>
             <para>The result will be null if the non-query fails. Otherwise, the result will be the number of rows affected if the non-query ran successfully.</para>
             <para>Note: A <see cref="T:System.Data.Common.DbTransaction"/> with <see cref="F:System.Data.IsolationLevel.ReadCommitted"/> will be used by default.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
            </summary>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;int?&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.NonQuery``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a non-query based on the <paramref name="onInit"/> action.</para>
             <para>Note: A <see cref="T:System.Data.Common.DbTransaction"/> with <see cref="F:System.Data.IsolationLevel.ReadCommitted"/> will be used by default.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.NonQueries(System.Action{System.Collections.Generic.Queue{System.Action{DbConnector.Core.IDbJobCommand}}})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;int?&gt;"/> able to execute all non-queries based on the <paramref name="onInit"/> action.</para>
             <para>The result will be null if a non-query fails. Otherwise, the result will be the number of rows affected if all non-queries ran successfully.</para>
             <para>Note: A <see cref="T:System.Data.Common.DbTransaction"/> with <see cref="F:System.Data.IsolationLevel.ReadCommitted"/> will be used by default.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
            </summary>
            <param name="onInit">Action that is used to configure and enqueue all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="!:IDbJob&lt;int?&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.NonQueries``1(System.Action{System.Collections.Generic.Queue{System.Action{DbConnector.Core.IDbJobCommand}}})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute all non-queries based on the <paramref name="onInit"/> action.</para>
             <para>Note: A <see cref="T:System.Data.Common.DbTransaction"/> with <see cref="F:System.Data.IsolationLevel.ReadCommitted"/> will be used by default.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
            </summary>
            <param name="onInit">Action that is used to configure and enqueue all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Build``1(System.Action{System.Collections.Generic.Queue{System.Action{DbConnector.Core.IDbJobCommand}}},System.Func{``0,DbConnector.Core.IDbExecutionModel,``0},System.Boolean)">
            <summary>
             Creates a <see cref="T:DbConnector.Core.IDbJob`1"/> which can be controlled 
             by the <see cref="T:DbConnector.Core.IDbExecutionModel"/> properties of the <see cref="!:IDbJob&lt;T&gt;.OnExecuted(Func&lt;T, IDbExecutionModel, T&gt;)"/> function.
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="onInit">Action that is used to configure and enqueue all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.<para>Note: This can only be null if <paramref name="isCreateDbCommand"/> is set to false.</para></param>
            <param name="onExecute">Function that will be invoked for each <see cref="T:DbConnector.Core.IDbJobCommand"/> and can be used to execute database calls and set the <typeparamref name="T"/> result.</param>
            <param name="isCreateDbCommand">Set this to false to disable the auto creation of a <see cref="T:System.Data.Common.DbCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when onExecute is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.IsConnected">
            <summary>
            Check if the database is available based on the provided connection string.
            </summary>
            <returns>The <see cref="!:IDbJob&lt;bool&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;dynamic&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>   
             <para>Use this to dynamically load the query results into an IEnumerable of <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;dynamic&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to dynamically load only the first row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to dynamically load only the first row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to dynamically load only a single row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to dynamically load only a single row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;dynamic&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>   
             <para>Use this to dynamically load the query results into a List of <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;List&lt;dynamic&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;dynamic&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>   
             <para>Use this to dynamically load the query results into an IEnumerable of <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;dynamic&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;dynamic&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>   
             <para>Use this to dynamically load the query results into an IEnumerable of <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>        
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;dynamic&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to dynamically load only the first row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>      
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to dynamically load only the first row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>  
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to dynamically load only the first row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to dynamically load only the first row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to dynamically load only a single row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to dynamically load only a single row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to dynamically load only a single row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to dynamically load only a single row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;dynamic&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>   
             <para>Use this to dynamically load the query results into a List of <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;List&lt;dynamic&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;dynamic&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>   
             <para>Use this to dynamically load the query results into a List of <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;List&lt;dynamic&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``2(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``3(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``4(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``5(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``6(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``7(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``8(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand}}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``2(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``3(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``4(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``5(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``6(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``7(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``8(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand}}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``2(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``3(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``4(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``5(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``6(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``7(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``8(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand}}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``2(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>      
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``3(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``4(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``5(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``6(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``7(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``8(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand}}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``2(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>        
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``3(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``4(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``5(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``6(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``7(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``8(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand}}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``2(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``3(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``4(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``5(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``6(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``7(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``8(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand}}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;T&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;T&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param>        
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param>        
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param>        
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param>        
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param>        
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;T&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;T&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param>        
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToDataTable(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;System.Data.DataTable&gt;"/> able to execute a reader based on the configured parameters.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;System.Data.DataTable&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToDataTable(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;System.Data.DataTable&gt;"/> able to execute a reader based on the configured parameters.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>        
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;System.Data.DataTable&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToDataSet(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;System.Data.DataSet&gt;"/> able to execute a reader based on the configured parameters.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;System.Data.DataSet&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToDataSet(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;System.Data.DataSet&gt;"/> able to execute a reader based on the configured parameters.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;System.Data.DataSet&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToHashSet``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;HashSet&lt;T&gt;&gt;"/> able to read the first column of each row from the query result based on the configured parameters. All other columns are ignored.</para>
             <para>Valid <typeparamref name="T"/> types: any .NET built-in type or ADO.NET data provider supported type.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default. <see cref="T:System.DBNull"/> values will be excluded.
            </remarks>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;HashSet&lt;T&gt;&gt;"/>.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is not supported.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToHashSet``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;HashSet&lt;T&gt;&gt;"/> able to read the first column of each row from the query result based on the configured parameters. All other columns are ignored.</para>
             <para>Valid <typeparamref name="T"/> types: any .NET built-in type or ADO.NET data provider supported type.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default. <see cref="T:System.DBNull"/> values will be excluded.
            </remarks>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>        
            <returns>The <see cref="!:IDbJob&lt;HashSet&lt;T&gt;&gt;"/>.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is not supported.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToKeyValuePairs(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>This is usefull when requiring a generic data list from the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToKeyValuePairs(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>This is usefull when requiring a generic data list from the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>       
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToDictionaries(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/> able to execute a reader based on the configured parameters.
             This is usefull when requiring a non-concrete data list from unique columns of the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToDictionaries(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/> able to execute a reader based on the configured parameters.
             This is usefull when requiring a non-concrete data list from unique columns of the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToListOfKeyValuePairs(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>This is usefull when requiring a generic data list from the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;List&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToListOfKeyValuePairs(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>This is usefull when requiring a generic data list from the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;List&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToListOfDictionaries(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/> able to execute a reader based on the configured parameters.
             This is usefull when requiring a non-concrete data list from unique columns of the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;List&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToListOfDictionaries(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/> able to execute a reader based on the configured parameters.
             This is usefull when requiring a non-concrete data list from unique columns of the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;List&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToDbCollectionSet(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>This is usefull when wanting to create a concrete object from multiple/different queries.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToDbCollectionSet(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>This is usefull when wanting to create a concrete object from multiple/different queries.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadTo``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Func{``0,DbConnector.Core.IDbExecutionModel,System.Data.Common.DbDataReader,``0},System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to load the data based on the <paramref name="onLoad"/> action.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param>        
            <param name="param">The parameter to use (or null for empty). <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply.</param> 
            <param name="onLoad">Function that is used to access the generated <see cref="T:System.Data.Common.DbDataReader"/> and transform the <typeparamref name="T"/> result.</param>
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onLoad is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadTo``1(System.String,System.Object,System.Func{``0,DbConnector.Core.IDbExecutionModel,System.Data.Common.DbDataReader,``0},System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to load the data based on the <paramref name="onLoad"/> action.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param>     
            <param name="param">The parameter to use (or null for empty). <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply.</param> 
            <param name="onLoad">Function that is used to access the generated <see cref="T:System.Data.Common.DbDataReader"/> and transform the <typeparamref name="T"/> result.</param>
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onLoad is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Scalar``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> to get the first column of the first row from the result
             set returned by the query. All other columns and rows are ignored.</para>
             <para>Valid <typeparamref name="T"/> types: any .NET built-in type or ADO.NET data provider supported type.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is not supported.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Scalar``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> to get the first column of the first row from the result
             set returned by the query. All other columns and rows are ignored.</para>
             <para>Valid <typeparamref name="T"/> types: any .NET built-in type or ADO.NET data provider supported type.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is not supported.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.NonQuery(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;int?&gt;"/> able to execute a non-query based on the configured parameters.</para>
             <para> The result will be null if the non-query fails. Otherwise, the result will be the number of rows affected if the non-query ran successfully.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
            </summary>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;int?&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.NonQuery(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;int?&gt;"/> able to execute a non-query based on the configured parameters.</para>
             <para> The result will be null if the non-query fails. Otherwise, the result will be the number of rows affected if the non-query ran successfully.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
            </summary>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;int?&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.NonQuery``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a non-query based on the configured parameters.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.NonQuery``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a non-query based on the configured parameters.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Build``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Func{``0,DbConnector.Core.IDbExecutionModel,``0},System.Boolean,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             Creates a <see cref="T:DbConnector.Core.IDbJob`1"/> which can be controlled 
             by the <see cref="T:DbConnector.Core.IDbExecutionModel"/> properties of the <see cref="!:IDbJob&lt;T&gt;.OnExecuted(Func&lt;T, IDbExecutionModel, T&gt;)"/> function.
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param>        
            <param name="param">The parameter to use (or null for empty). <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply.</param> 
            <param name="onExecute">Function that will be invoked for each <see cref="T:DbConnector.Core.IDbJobCommand"/> and can be used to execute database calls and set the <typeparamref name="T"/> result.</param>
            <param name="isCreateDbCommand">Set this to false to disable the auto creation of a <see cref="T:System.Data.Common.DbCommand"/>. (Optional)</param>
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onExecute is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Build``1(System.String,System.Object,System.Func{``0,DbConnector.Core.IDbExecutionModel,``0},System.Boolean,System.Data.CommandType)">
            <summary>
             Creates a <see cref="T:DbConnector.Core.IDbJob`1"/> which can be controlled 
             by the <see cref="T:DbConnector.Core.IDbExecutionModel"/> properties of the <see cref="!:IDbJob&lt;T&gt;.OnExecuted(Func&lt;T, IDbExecutionModel, T&gt;)"/> function.
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param>   
            <param name="param">The parameter to use (or null for empty). <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply.</param> 
            <param name="onExecute">Function that will be invoked for each <see cref="T:DbConnector.Core.IDbJobCommand"/> and can be used to execute database calls and set the <typeparamref name="T"/> result.</param>
            <param name="isCreateDbCommand">Set this to false to disable the auto creation of a <see cref="T:System.Data.Common.DbCommand"/>. (Optional)</param>
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onExecute is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read(System.Type,System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;object&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;object&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst(System.Type,System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault(System.Type,System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle(System.Type,System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault(System.Type,System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList(System.Type,System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;object&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;List&lt;object&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToHashSet(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;HashSet&lt;object&gt;&gt;"/> able to read the first column of each row from the query result based on the <paramref name="onInit"/> action. All other columns are ignored.</para>  
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default. <see cref="T:System.DBNull"/> values will be excluded.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="!:IDbJob&lt;HashSet&lt;object&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Scalar(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> to get the first column of the first row from the result
             set returned by the query. All other columns and rows are ignored.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>
            </summary>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read(System.Type,DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;object&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;object&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Read(System.Type,System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;object&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="sql">The query text command to run against the data source.</param>        
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;object&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst(System.Type,DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirst(System.Type,System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault(System.Type,DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadFirstOrDefault(System.Type,System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle(System.Type,DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingle(System.Type,System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault(System.Type,DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadSingleOrDefault(System.Type,System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList(System.Type,DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;object&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;List&lt;object&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToList(System.Type,System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;object&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;List&lt;object&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToHashSet(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;HashSet&lt;object&gt;&gt;"/> able to read the first column of each row from the query result based on the configured parameters. All other columns are ignored.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default. <see cref="T:System.DBNull"/> values will be excluded.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;HashSet&lt;object&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.ReadToHashSet(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;HashSet&lt;object&gt;&gt;"/> able to read the first column of each row from the query result based on the configured parameters. All other columns are ignored.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default. <see cref="T:System.DBNull"/> values will be excluded.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>        
            <returns>The <see cref="!:IDbJob&lt;HashSet&lt;object&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Scalar(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> to get the first column of the first row from the result
             set returned by the query. All other columns and rows are ignored.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>
            </summary>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnector`1.Scalar(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> to get the first column of the first row from the result
             set returned by the query. All other columns and rows are ignored.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>
            </summary>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnectorCache.ClearCache">
            <summary>
            Clears all the cache.
            </summary>
        </member>
        <member name="M:DbConnector.Core.DbConnectorCache.ClearColumnMapCache">
            <summary>
            Clear the ColumnMap cache.
            </summary>
        </member>
        <member name="M:DbConnector.Core.DbConnectorCache.GetColumnMapCacheCount">
            <summary>
            Get the current ColumnMap cache count. This can be used to monitor memory usage and/or establish cache removal.
            <para>See also: <seealso cref="M:DbConnector.Core.DbConnectorCache.ClearColumnMapCache"/> and <seealso cref="M:DbConnector.Core.DbConnectorCache.ClearCache"/></para>
            </summary>
            <returns>The ColumnMap cache count.</returns>
        </member>
        <member name="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution">
            <summary>
            By default, the DbConnector will throw exeptions when using the non-handled execution <see cref="T:DbConnector.Core.IDbJob`1"/> functions.
            </summary>
        </member>
        <member name="F:DbConnector.Core.DbConnectorFlags.NoAutoSequentialAccessCommandBehavior">
            <summary>
            By default, the DbConnector will optimize all <see cref="T:System.Data.Common.DbCommand"/> read executions by configuring the <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to reduce memory usage.
            </summary>
        </member>
        <member name="F:DbConnector.Core.DbConnectorFlags.NoCommandBehaviorOptimization">
            <summary>
            By default, the DbConnector will optimize all <see cref="T:System.Data.Common.DbCommand"/> executions by configuring the <see cref="T:System.Data.CommandBehavior"/>.
            </summary>
        </member>
        <member name="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand">
            <summary>
            By default, one database connection per command will be created/opened thus potentially returning a faster result.
            </summary>
        </member>
        <member name="F:DbConnector.Core.DbConnectorFlags.NoDbConnectionInstanceBuilderCaching">
            <summary>
            By default, the DbConnector will cache all <see cref="T:System.Data.Common.DbConnection"/> instance builders for faster executions.
            <para>Note: This flag should, on rare occasions, only be used to disable this feature when running an <see cref="T:DbConnector.Core.IDbConnector`1"/> just once. 
            Also, the <see cref="F:DbConnector.Core.DbConnectorFlags.NoCache"/> flag has higher priority and will disable this feature if used.</para>
            </summary>
        </member>
        <member name="F:DbConnector.Core.DbConnectorFlags.NoCache">
            <summary>
            Use this flag to "globally" disable the caching of query mappings and types.
            </summary>
        </member>
        <member name="F:DbConnector.Core.DbJobCommandFlags.NoAutoSequentialAccessCommandBehavior">
            <summary>
            By default, the DbConnector will optimize all <see cref="T:System.Data.Common.DbCommand"/> read executions by configuring the <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to reduce memory usage.
            <para>Use this flag to disable this behavior for a specific <see cref="T:DbConnector.Core.DbJobCommand"/>.</para>
            </summary>
        </member>
        <member name="F:DbConnector.Core.DbJobCommandFlags.NoCache">
            <summary>
            Use this flag to disable the caching of query mappings and types for a specific <see cref="T:DbConnector.Core.DbJobCommand"/>.
            </summary>
        </member>
        <member name="M:DbConnector.Core.DbJobCommand.GetDbParameters">
            <summary>
            Get the referenced <see cref="T:System.Data.Common.DbParameterCollection"/>. This can be useful when wanting to cast and insert type specific parameters.
            </summary>
            <returns><see cref="T:System.Data.Common.DbParameterCollection"/></returns>
        </member>
        <member name="M:DbConnector.Core.DbJobCommand.GetDbCommand">
            <summary>
            Get the referenced <see cref="T:System.Data.Common.DbCommand"/>.
            </summary>
            <returns><see cref="T:System.Data.Common.DbCommand"/></returns>
        </member>
        <member name="P:DbConnector.Core.DbJobCommand.CommandType">
            <summary>
            Use to set the command type and override the default Text CommandType.
            </summary>
        </member>
        <member name="P:DbConnector.Core.DbJobCommand.CommandText">
            <summary>
            Gets or sets the text command to run against the data source.
            </summary>
        </member>
        <member name="P:DbConnector.Core.DbJobCommand.CommandTimeout">
            <summary>
            The time in seconds to wait for the command to execute.
            </summary>
        </member>
        <member name="M:DbConnector.Core.DbJobParameterCollection.GetDbParameters">
            <summary>
            Get the referenced <see cref="T:System.Data.Common.DbParameterCollection"/>. This can be useful when wanting to cast and insert type specific parameters.
            </summary>
            <returns><see cref="T:System.Data.Common.DbParameterCollection"/></returns>
        </member>
        <member name="M:DbConnector.Core.DbJobParameterCollection.AddFor``1(``0,System.Boolean,System.String,System.String)">
            <summary>
            Add parameters using the properties of the <paramref name="param"/> object. These default to <see cref="F:System.Data.ParameterDirection.Input"/>.
            <para>Valid <typeparamref name="T"/> types: anonymous, or any struct or class that is not a .NET built-in type and is not assignable from <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.ComponentModel.IListSource"/>.</para>
            <para><see cref="T:System.Enum"/> properties, including <see cref="T:System.Enum"/> arrays, will be changed to the applicable underlying type.</para>
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="param">The object whose properties will be mapped.</param>
            <param name="isUseColumnAttribute">Set to false to not use the <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute"/> for names. (Optional)</param>
            <param name="paramsPrefix">The prefix to use for all column names. (Optional)</param>
            <param name="paramsSuffix">The suffix to use for all column names. (Optional)</param>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is .NET built-in type.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is assignable from <see cref="T:System.Collections.IEnumerable"/>.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is assignable from <see cref="T:System.ComponentModel.IListSource"/>.</exception>
        </member>
        <member name="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)">
            <summary>
            Add parameters using the properties of the <paramref name="param"/> object. These default to <see cref="F:System.Data.ParameterDirection.Input"/>.
            <para>Valid object types: anonymous, or any struct or class that is not a .NET built-in type and is not assignable from <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.ComponentModel.IListSource"/>.</para>
            <para><see cref="T:System.Enum"/> properties, including <see cref="T:System.Enum"/> arrays, will be changed to the applicable underlying type.</para>
            </summary>
            <param name="param">The object whose properties will be mapped.</param>
            <param name="isUseColumnAttribute">Set to false to not use the <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute"/> for names. (Optional)</param>
            <param name="paramsPrefix">The prefix to use for all column names. (Optional)</param>
            <param name="paramsSuffix">The suffix to use for all column names. (Optional)</param>
            <exception cref="T:System.InvalidCastException">Thrown when object type is .NET built-in type.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when object type is assignable from <see cref="T:System.Collections.IEnumerable"/>.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when object type is assignable from <see cref="T:System.ComponentModel.IListSource"/>.</exception>
        </member>
        <member name="M:DbConnector.Core.ColumnMapSetting.WithSplitOn``1(System.String)">
            <summary>
            Set the starting/locator inclusive column name to use when mapping an object of <typeparamref name="T"/> type.
            </summary>
            <typeparam name="T">The object type to use.</typeparam>
            <param name="columnName">The column name to use.</param>
            <returns>The current <see cref="T:DbConnector.Core.IColumnMapSetting"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="columnName"/> is null.</exception>
        </member>
        <member name="M:DbConnector.Core.ColumnMapSetting.WithSplitOnFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Set the starting/locator inclusive column name to use when mapping an object of <typeparamref name="T"/> type.
            </summary>
            <typeparam name="T">The object type to use.</typeparam>
            <param name="expression">The expression to use.</param>
            <param name="isUseColumnAttribute">Set to false to not use the <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute"/> for names. (Optional)</param>
            <returns>The current <see cref="T:DbConnector.Core.IColumnMapSetting"/>.</returns>
            <exception cref="T:System.MemberAccessException">Thrown when the provided expression's property is not a member of <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:DbConnector.Core.ColumnMapSetting.WithSplitOn(System.Type,System.String)">
            <summary>
            Set the starting/locator inclusive column name to use when mapping an object of the specified type.
            </summary>
            <param name="tType">The object <see cref="T:System.Type"/> to use.</param>
            <param name="columnName">The column name to use.</param>
            <returns>The current <see cref="T:DbConnector.Core.IColumnMapSetting"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="columnName"/> is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbCollectionSet.DequeueFirstOrDefault``1">
            <summary>
            Removes and returns the first element of the data collection.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <returns>The object of <typeparamref name="T"/> type.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> does not match the value type or <typeparamref name="T"/> is a class without a parameterless constructor.</exception>
        </member>
        <member name="M:DbConnector.Core.DbCollectionSet.DequeueFirstOrDefault``1(DbConnector.Core.IColumnMapSetting)">
            <summary>
            Removes and returns the first element of the data collection.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="settings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param>
            <returns>The object of <typeparamref name="T"/> type.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> does not match the value type or <typeparamref name="T"/> is a class without a parameterless constructor.</exception>
        </member>
        <member name="M:DbConnector.Core.DbCollectionSet.Dequeue``1">
            <summary>
            Removes and returns the data as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> result.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> does not match the value type or <typeparamref name="T"/> is a class without a parameterless constructor.</exception>
        </member>
        <member name="M:DbConnector.Core.DbCollectionSet.Dequeue``1(DbConnector.Core.IColumnMapSetting)">
            <summary>
            Removes and returns the data as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="settings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> result.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> does not match the value type or <typeparamref name="T"/> is a class without a parameterless constructor.</exception>
        </member>
        <member name="M:DbConnector.Core.DbCollectionSet.ElementAt``1(System.Int32)">
            <summary>
            Returns the first element of the data collection.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="index">The index to use.</param>
            <returns>The object of <typeparamref name="T"/> type.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> does not match the value type or <typeparamref name="T"/> is a class without a parameterless constructor.</exception>
        </member>
        <member name="M:DbConnector.Core.DbCollectionSet.ElementAt``1(System.Int32,DbConnector.Core.IColumnMapSetting)">
            <summary>
            Returns the first element of the data collection.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="index">The index to use.</param>
            <param name="settings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param>
            <returns>The object of <typeparamref name="T"/> type.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> does not match the value type or <typeparamref name="T"/> is a class without a parameterless constructor.</exception>
        </member>
        <member name="M:DbConnector.Core.DbCollectionSet.ElementsAt``1(System.Int32)">
            <summary>
            Returns the data as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="index">The index to use.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> result.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> does not match the value type or <typeparamref name="T"/> is a class without a parameterless constructor.</exception>
        </member>
        <member name="M:DbConnector.Core.DbCollectionSet.ElementsAt``1(System.Int32,DbConnector.Core.IColumnMapSetting)">
            <summary>
            Returns the data as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="index">The index to use.</param>
            <param name="settings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> result.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> does not match the value type or <typeparamref name="T"/> is a class without a parameterless constructor.</exception>
        </member>
        <member name="P:DbConnector.Core.DbExecutionModel.Connection">
            <summary>
            The DbConnection which will be disposed internally within a "finally" statement.
            </summary>
        </member>
        <member name="P:DbConnector.Core.DbExecutionModel.Transaction">
            <summary>
            The DbTransaction which will be "committed" (or "rolled back" on exceptions) automatically and disposed internally within a "finally" statement.
            </summary>
        </member>
        <member name="P:DbConnector.Core.DbExecutionModel.Command">
            <summary>
            <para>
            The <see cref="T:System.Data.Common.DbCommand"/> which will be disposed internally within a "finally" statement.        
            </para>
             See also:
             <seealso cref="M:System.Data.Common.DbConnection.CreateCommand"/>
            </summary>
        </member>
        <member name="P:DbConnector.Core.DbExecutionModel.JobCommand">
            <summary>
            The <see cref="T:DbConnector.Core.IDbJobCommand"/> being executed.
            </summary>
        </member>
        <member name="P:DbConnector.Core.DbExecutionModel.DeferrableDisposables">
            <summary>
            Externally created <see cref="T:System.IDisposable"/> objects (e.g. <see cref="T:System.Data.Common.DbDataReader"/>) which have to be disposed internally within a "finally" statement.
            <para>This Queue has to be used in order to support the non-buffered or disposable execution of an <see cref="T:DbConnector.Core.IDbJob`1"/>.</para>
            <para>Note: This will be <see cref="!:null"/> for buffered/non-disposable <see cref="T:DbConnector.Core.IDbJob`1"/> executions. In this case, use either the <see cref="M:DbConnector.Core.IDbExecutionModel.DeferDisposable(System.IDisposable)"/> function, a "try/finally" block, or an "using" statement instead.</para>
            </summary>
        </member>
        <member name="M:DbConnector.Core.DbExecutionModel.DeferDisposable(System.IDisposable)">
            <summary>
            Used to defer the disposal of an <see cref="T:System.IDisposable"/> object to the current <see cref="T:DbConnector.Core.IDbJob`1"/>'s "finally" statement.
            <para>This can only be used for a single disposable, instead of the <see cref="P:DbConnector.Core.IDbExecutionModel.DeferrableDisposables"/> property, in order to reduce memory usage for buffered/non-disposable <see cref="T:DbConnector.Core.IDbJob`1"/> execution.</para>
            <para>Note: Use either a "try/finally" block or an "using" statement instead.</para>
            </summary>
            <param name="disposable">The <see cref="T:System.IDisposable"/> object to defer.</param>
        </member>
        <member name="P:DbConnector.Core.DbExecutionModel.JobState">
            <summary>
            The current <see cref="T:DbConnector.Core.IDbJob`1"/> state.
            </summary>
        </member>
        <member name="P:DbConnector.Core.DbExecutedModel.IsDisposable">
            <summary>
            Return true if <see cref="T:DbConnector.Core.IDbJob`1"/> was executed as "disposable".
            </summary>
        </member>
        <member name="P:DbConnector.Core.DbExecutedModel.Index">
            <summary>
            The current executed <see cref="T:DbConnector.Core.IDbJobCommand"/> index. This is internally assigned and can be used for tracking purposes.
            </summary>
        </member>
        <member name="T:DbConnector.Core.DbDisposable`1">
            <summary>
            An instance of this class needs to be disposed. Otherwise, the <see cref="T:System.Data.Common.DbConnection"/> will not be closed and other disposable objects will remain in memory.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="P:DbConnector.Core.DbDisposable`1.Connection">
            <summary>
            The DbConnection of the DbJob which will be disposed internally when calling the <see cref="M:System.IDisposable.Dispose"/> function.
            </summary>
        </member>
        <member name="P:DbConnector.Core.DbDisposable`1.Transaction">
            <summary>
            The DbTransaction of the DbJob which will be disposed internally when calling the <see cref="M:System.IDisposable.Dispose"/> function.
            </summary>
        </member>
        <member name="M:DbConnector.Core.DbConnectorUtilities.GetColumnMaps``1(DbConnector.Core.OrdinalColumnMap[],DbConnector.Core.IColumnMapSetting)">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the properties of the T type and the keys.
            </summary>      
            <param name="ordinalColumnMap">The ordinal column map.</param>
            <param name="settings">The settings to use.</param>
            <returns>A list with the ColumnMap objects.</returns> 
            <exception cref="T:System.InvalidCastException">Thrown when a property of <typeparamref name="T"/> does not match the located key type.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnectorUtilities.GetColumnMaps(System.Type,DbConnector.Core.OrdinalColumnMap[],DbConnector.Core.IColumnMapSetting)">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the properties of the tType and the keys.
            </summary>      
            <param name="tType">The type to use.</param>
            <param name="ordinalColumnMap">The ordinal column map.</param>
            <param name="settings">The settings to use.</param>
            <returns>A list with the ColumnMap objects.</returns> 
            <exception cref="T:System.InvalidCastException">Thrown when a property of <paramref name="tType"/> does not match the located key type.</exception>
        </member>
        <member name="M:DbConnector.Core.DbConnectorUtilities.GetMappedObject``1(System.Collections.Generic.IEnumerable{DbConnector.Core.ColumnMap},System.Func{DbConnector.Core.ColumnMap,System.Object})">
            <summary>
            Maps the properties of type <typeparamref name="T"/> using the provided column maps.
            </summary>
            <typeparam name="T">The type to use.</typeparam>
            <param name="columnMaps">The column maps to use</param>
            <param name="onGetObjectValue">The function to call to get the data based on the column map.</param>
            <returns>The mapped object.</returns>
        </member>
        <member name="M:DbConnector.Core.DbConnectorUtilities.GetMappedObject(System.Type,System.Collections.Generic.IEnumerable{DbConnector.Core.ColumnMap},System.Func{DbConnector.Core.ColumnMap,System.Object})">
            <summary>
            Maps the properties of type <paramref name="objType"/> using the provided column maps.
            </summary>
            <param name="objType">The types to use.</param>
            <param name="columnMaps">The column maps to use.</param>
            <param name="onGetObjectValue">The function to call to get the data based on the column map.</param>
            <returns>The mapped object.</returns>
        </member>
        <member name="T:DbConnector.Core.DbJobBase`1">
            <summary>
            Represents a configurable and executable database job.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DbConnector.Core.DbJobBase`1.ConnectionString">
            <summary>
            Gets the string used to open the connection.
            </summary>
        </member>
        <member name="P:DbConnector.Core.DbJobBase`1.ConnectionType">
            <summary>
            Gets the type of <see cref="T:System.Data.Common.DbConnection"/> being used.
            </summary>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.#ctor(DbConnector.Core.DbJobBase{`0})">
            <summary>
            Copy Constructor
            <para>Note: This will use a clone lock in order to prevent race conditions.</para>
            </summary>
            <param name="jobToCopy"></param>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.Execute(System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJob`1"/>.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>       
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The T result.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.Execute(System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJob`1"/>.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The T result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="transaction"/> is null.</exception>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.ExecuteAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJob`1"/> asynchronously.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.ExecuteAsync(System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJob`1"/> asynchronously.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.ExecuteHandled(System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJob`1"/> and handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbResult`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.ExecuteHandled(System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJob`1"/> and handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbResult`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.ExecuteHandledAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJob`1"/> and handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/> asynchronously.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.ExecuteHandledAsync(System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJob`1"/> and handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/> asynchronously.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.ExecuteDisposable(System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Use this function when a serialized data extraction is required. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbDisposable`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.ExecuteDisposable(System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Use this function when a serialized data extraction is required. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbDisposable`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.ExecuteDisposableAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Use this asynchronous function when a serialized data extraction is required. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbDisposable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.ExecuteDisposableAsync(System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Use this asynchronous function when a serialized data extraction is required. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbDisposable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.ExecuteDisposableHandled(System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Use this function when a serialized data extraction is required and to handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbResult&lt;IDbDisposable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.ExecuteDisposableHandled(System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            Use this function when a serialized data extraction is required and to handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbResult&lt;IDbDisposable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.ExecuteDisposableHandledAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Use this asynchronous function when a serialized data extraction is required and to handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;IDbDisposable&lt;T&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.ExecuteDisposableHandledAsync(System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            Use this asynchronous function when a serialized data extraction is required and to handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;IDbDisposable&lt;T&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.WithLogging(System.Boolean)">
            <summary>
            Use this function to disable or enable error logging (this is enabled by default). Disabling this can be useful when logging errors in order to prevent an infinite loop.
            </summary>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Use this function to set the <see cref="T:System.Data.IsolationLevel"/> and enable the use of a <see cref="T:System.Data.Common.DbTransaction"/> for this <see cref="T:DbConnector.Core.IDbJob`1"/>.
            </summary>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.SetWithIsolationLevel(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Use this function to set the <see cref="T:System.Data.IsolationLevel"/> for this <see cref="T:DbConnector.Core.IDbJob`1"/>.
            <para>Note: Should only be called when initiating this <see cref="T:DbConnector.Core.IDbJob`1"/>.</para>
            </summary>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.WithBuffering(System.Boolean)">
            <summary>
            <para>Use this function to disable or enable buffered (non-deferred/non-yielded) execution when reading data (this is enabled by default).</para>
            <para>Note: Deferred execution is only possible for <see cref="T:System.Collections.IEnumerable"/> types during individual transactions. Consequently, normal execution will be used when encountering non <see cref="T:System.Collections.IEnumerable"/> types or Batch-Reading implementations.</para>
            Warning: Exceptions may occur while looping deferred <see cref="T:System.Collections.IEnumerable"/> types because of the implicit database connection dependency.
            </summary>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.WithCache(System.Boolean)">
            <summary>
            <para>Use this function to disable or enable the caching of query mappings and types for a all <see cref="T:DbConnector.Core.DbJobCommand"/> owned by this <see cref="T:DbConnector.Core.IDbJob`1"/>.</para>
            </summary>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.SetBranchedProperties(System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Use this function to set branched properties for this <see cref="T:DbConnector.Core.IDbJob`1"/>.
            <para>Note: Should only be called when initiating this <see cref="T:DbConnector.Core.IDbJob`1"/>.</para>
            </summary>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.WithIsolatedConnections(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Use this function when wanting to use isolated connections (a.k.a branching) for this <see cref="T:DbConnector.Core.IDbJob`1"/>.
            </summary>
            <param name="isEnabled">Enable or disable the use of isolated connections.</param>
            <param name="isUseLock">True to use locking. (Optional)</param>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.WithState(DbConnector.Core.IDbJobState,System.Boolean)">
            <summary>
            Use this function to set the <see cref="T:DbConnector.Core.IDbJobState"/> for this <see cref="T:DbConnector.Core.IDbJob`1"/>.
            </summary>
            <param name="state">The <see cref="T:DbConnector.Core.IDbJobState"/> to use.</param>
            <param name="isUseLock">Set to true in order to use locking. (Optional)</param>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.OnBranch(System.Func{DbConnector.Core.DbBranchResult{`0},DbConnector.Core.IDbExecutionModel,DbConnector.Core.IDbJob{`0},DbConnector.Core.DbBranchResult{`0}},DbConnector.Core.EventSetting)">
            <summary>
            Action to call before each connection is opened in order to "branch" the result. Note: Should only be called when initiating this <see cref="T:DbConnector.Core.IDbJob`1"/>.
            </summary>
            <param name="action">The action to invoke.</param>
            <param name="setting">The event setting to use. (Optional)</param>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.OnExecuted(System.Func{System.Object,DbConnector.Core.IDbExecutedModel,System.Object},DbConnector.Core.EventSetting)">
            <summary>
            Action to call after a DbCommand is executed. Note: Should only be called when initiating this <see cref="T:DbConnector.Core.IDbJob`1"/>.
            </summary>
            <param name="action">The action to invoke.</param>
            <param name="setting">The event setting to use. (Optional)</param>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.OnExecuted(System.Func{`0,DbConnector.Core.IDbExecutedModel,`0},DbConnector.Core.EventSetting)">
            <summary>
            Use this to set the delegate to call after a DbCommand is executed. You can use this to change the <see cref="!:&lt;T&gt;"/> result based on the event.
            </summary>
            <param name="action">The action to invoke.</param>
            <param name="setting">The event setting to use. (Optional)</param>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.OnCompleted(System.Func{`0,`0},DbConnector.Core.EventSetting)">
            <summary>
            Use this to set the delegate to call after all DbCommands are executed without errors. You can use this to change the <see cref="!:&lt;T&gt;"/> result based on the event.
            </summary>
            <param name="action">The action to invoke.</param>
            <param name="setting">The event setting to use. (Optional)</param>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.OnError(System.Func{`0,System.Exception,`0},DbConnector.Core.EventSetting)">
            <summary>
            Use this to set the delegate to call when an error occurs. You can use this to change the <see cref="!:&lt;T&gt;"/> result based on the event.
            </summary>
            <param name="action">The action to invoke.</param>
            <param name="setting">The event setting to use. (Optional)</param>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.SetOnError(System.Func{`0,System.Exception,`0})">
            <summary>
            Use this to set the delegate to call when an error occurs. You can use this to change the <see cref="!:&lt;T&gt;"/> result based on the event.
            <para>Note: Should only be called when initiating this <see cref="T:DbConnector.Core.IDbJob`1"/>.</para>
            </summary>
            <param name="action">The action to invoke.</param>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.ToCacheable``1(``0)">
            <summary>
            Use this to create an <see cref="T:DbConnector.Core.IDbJobCacheable`2"/>.
            <para>Note: This should only be used when wanting to cache the current <see cref="T:DbConnector.Core.IDbJob`1"/> (e.g. when caching in a static field).</para>
            </summary>
            <typeparam name="TStateParamValue">The state parameter type to use.</typeparam>
            <param name="value">The state parameter value to use</param>
            <returns>The new <see cref="T:DbConnector.Core.IDbJobCacheable`2"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`1.ToCacheable``1">
            <summary>
            Use this to create an <see cref="T:DbConnector.Core.IDbJobCacheable`2"/>.
            <para>Note: This should only be used when wanting to cache the current <see cref="T:DbConnector.Core.IDbJob`1"/> (e.g. when caching in a static field).</para>
            </summary>
            <typeparam name="TStateParamValue">The state parameter type to use.</typeparam>
            <returns>The new <see cref="T:DbConnector.Core.IDbJobCacheable`2"/>.</returns>
        </member>
        <member name="T:DbConnector.Core.DbJobBase`2">
            <summary>
            Represents a configurable and executable database job.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TStateParam"></typeparam>
        </member>
        <member name="M:DbConnector.Core.DbJobBase`2.#ctor(DbConnector.Core.DbJobBase{`0,`1})">
            <summary>
            Copy Constructor
            <para>Note: This will use a clone lock in order to prevent race conditions.</para>
            </summary>
            <param name="jobToCopy"></param>
        </member>
        <member name="M:DbConnector.Core.DbJob`2.#ctor(DbConnector.Core.DbJobBase{`0})">
            <summary>
            Copy Constructor
            <para>Note: This will use a clone lock in order to prevent race conditions.</para>
            </summary>
            <param name="jobToCopy"></param>
        </member>
        <member name="M:DbConnector.Core.DbJob`3.#ctor(DbConnector.Core.DbJobBase{`0,`1})">
            <summary>
            Copy Constructor
            <para>Note: This will use a clone lock in order to prevent race conditions.</para>
            </summary>
            <param name="jobToCopy"></param>
        </member>
        <member name="M:DbConnector.Core.DbJobCacheable`3.Execute(`1,System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJobCacheable`2"/>.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>      
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The T result.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobCacheable`3.Execute(`1,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJobCacheable`2"/>.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>    
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The T result.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobCacheable`3.ExecuteAsync(`1,System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> asynchronously.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobCacheable`3.ExecuteAsync(`1,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> asynchronously.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>  
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobCacheable`3.ExecuteHandled(`1,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> and handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbResult`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobCacheable`3.ExecuteHandled(`1,System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> and handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>  
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbResult`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobCacheable`3.ExecuteHandledAsync(`1,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> and handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/> asynchronously.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobCacheable`3.ExecuteHandledAsync(`1,System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> and handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/> asynchronously.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>  
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobCacheable`3.ExecuteDisposable(`1,System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Use this function when a serialized data extraction is required. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbDisposable`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobCacheable`3.ExecuteDisposable(`1,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Use this function when a serialized data extraction is required. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param> 
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbDisposable`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobCacheable`3.ExecuteDisposableAsync(`1,System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Use this asynchronous function when a serialized data extraction is required. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbDisposable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobCacheable`3.ExecuteDisposableAsync(`1,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Use this asynchronous function when a serialized data extraction is required. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param> 
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbDisposable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobCacheable`3.ExecuteDisposableHandled(`1,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Use this function when a serialized data extraction is required and to handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbResult&lt;IDbDisposable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobCacheable`3.ExecuteDisposableHandled(`1,System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            Use this function when a serialized data extraction is required and to handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param> 
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbResult&lt;IDbDisposable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobCacheable`3.ExecuteDisposableHandledAsync(`1,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Use this asynchronous function when a serialized data extraction is required and to handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;IDbDisposable&lt;T&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJobCacheable`3.ExecuteDisposableHandledAsync(`1,System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            Use this asynchronous function when a serialized data extraction is required and to handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param> 
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;IDbDisposable&lt;T&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="T:DbConnector.Core.DbJob">
            <summary>
            Used to execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <summary>
            Used to execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAll(System.Collections.Generic.IEnumerable{DbConnector.Core.IDbJob},System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Boolean,DbConnector.Core.IDbConnectorLogger,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> to use. (Optional)</param>
            <param name="isLoggingEnabled">Use to disable logging. (Optional)</param>
            <param name="logger">The <see cref="T:DbConnector.Core.IDbConnectorLogger"/> to use. The logger from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item will be used by default when null. (Optional)</param>      
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to disable the throwing of transactions. (Optional)</param>
            <returns>The <see cref="!:List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAll(System.Collections.Generic.IEnumerable{DbConnector.Core.IDbJob},System.Data.Common.DbTransaction,System.Boolean,DbConnector.Core.IDbConnectorLogger,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="isLoggingEnabled">Use to disable logging. (Optional)</param>
            <param name="logger">The <see cref="T:DbConnector.Core.IDbConnectorLogger"/> to use. The logger from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item will be used by default when null. (Optional)</param>      
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to disable the throwing of transactions. (Optional)</param>
            <returns>The <see cref="!:List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAll(DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            <para>Note: The <see cref="T:System.Data.Common.DbConnection"/> will be created based on the first provided <see cref="T:DbConnector.Core.IDbJob"/> item.</para>
            </summary>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAll(System.Data.IsolationLevel,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            <para>Note: The <see cref="T:System.Data.Common.DbConnection"/> will be created based on the first provided <see cref="T:DbConnector.Core.IDbJob"/> item.</para>
            </summary>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> to use.</param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAll(System.Data.Common.DbConnection,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAll(System.Data.Common.DbConnection,System.Data.IsolationLevel,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> to use.</param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAll(System.Data.Common.DbTransaction,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAll(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Threading.CancellationToken,System.Boolean,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> to use. (Optional)</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to disable the throwing of transactions. (Optional)</param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAll(System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Boolean,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to disable the throwing of transactions. (Optional)</param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllAsync(System.Collections.Generic.IEnumerable{DbConnector.Core.IDbJob},System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Boolean,DbConnector.Core.IDbConnectorLogger,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            </summary>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> to use. (Optional)</param>
            <param name="isLoggingEnabled">Use to disable logging. (Optional)</param>
            <param name="logger">The <see cref="T:DbConnector.Core.IDbConnectorLogger"/> to use. The logger from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item will be used by default when null. (Optional)</param>      
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to disable the throwing of transactions. (Optional)</param>
            <returns>The <see cref="!:Task&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllAsync(System.Collections.Generic.IEnumerable{DbConnector.Core.IDbJob},System.Data.Common.DbTransaction,System.Boolean,DbConnector.Core.IDbConnectorLogger,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            </summary>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="isLoggingEnabled">Use to disable logging. (Optional)</param>
            <param name="logger">The <see cref="T:DbConnector.Core.IDbConnectorLogger"/> to use. The logger from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item will be used by default when null. (Optional)</param>      
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to disable the throwing of transactions. (Optional)</param>
            <returns>The <see cref="!:Task&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllAsync(DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            <para>Note: The <see cref="T:System.Data.Common.DbConnection"/> will be created based on the first provided <see cref="T:DbConnector.Core.IDbJob"/> item.</para>
            </summary>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:Task&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllAsync(System.Data.IsolationLevel,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            <para>Note: The <see cref="T:System.Data.Common.DbConnection"/> will be created based on the first provided <see cref="T:DbConnector.Core.IDbJob"/> item.</para>
            </summary>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> to use.</param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:Task&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllAsync(System.Data.Common.DbConnection,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:Task&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllAsync(System.Data.Common.DbConnection,System.Data.IsolationLevel,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> to use.</param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:Task&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllAsync(System.Data.Common.DbTransaction,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:Task&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllAsync(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Threading.CancellationToken,System.Boolean,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> to use. (Optional)</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to disable the throwing of transactions. (Optional)</param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:Task&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllAsync(System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Boolean,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to disable the throwing of transactions. (Optional)</param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:Task&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandled(System.Collections.Generic.IEnumerable{DbConnector.Core.IDbJob},System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Boolean,DbConnector.Core.IDbConnectorLogger,System.Threading.CancellationToken)">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> to use. (Optional)</param>
            <param name="isLoggingEnabled">Use to disable logging. (Optional)</param>
            <param name="logger">The <see cref="T:DbConnector.Core.IDbConnectorLogger"/> to use. The logger from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item will be used by default when null. (Optional)</param>      
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandled(System.Collections.Generic.IEnumerable{DbConnector.Core.IDbJob},System.Data.Common.DbTransaction,System.Boolean,DbConnector.Core.IDbConnectorLogger,System.Threading.CancellationToken)">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="isLoggingEnabled">Use to disable logging. (Optional)</param>
            <param name="logger">The <see cref="T:DbConnector.Core.IDbConnectorLogger"/> to use. The logger from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item will be used by default when null. (Optional)</param>      
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandled(DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            <para>Note: The <see cref="T:System.Data.Common.DbConnection"/> will be created based on the first provided <see cref="T:DbConnector.Core.IDbJob"/> item.</para>
            </summary>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandled(System.Data.IsolationLevel,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            <para>Note: The <see cref="T:System.Data.Common.DbConnection"/> will be created based on the first provided <see cref="T:DbConnector.Core.IDbJob"/> item.</para>
            </summary>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> to use.</param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandled(System.Data.Common.DbConnection,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandled(System.Data.Common.DbConnection,System.Data.IsolationLevel,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> to use.</param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandled(System.Data.Common.DbTransaction,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandled(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Threading.CancellationToken,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> to use. (Optional)</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandled(System.Data.Common.DbTransaction,System.Threading.CancellationToken,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandledAsync(System.Collections.Generic.IEnumerable{DbConnector.Core.IDbJob},System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Boolean,DbConnector.Core.IDbConnectorLogger,System.Threading.CancellationToken)">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            </summary>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> to use. (Optional)</param>
            <param name="isLoggingEnabled">Use to disable logging. (Optional)</param>
            <param name="logger">The <see cref="T:DbConnector.Core.IDbConnectorLogger"/> to use. The logger from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item will be used by default when null. (Optional)</param>      
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandledAsync(System.Collections.Generic.IEnumerable{DbConnector.Core.IDbJob},System.Data.Common.DbTransaction,System.Boolean,DbConnector.Core.IDbConnectorLogger,System.Threading.CancellationToken)">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            </summary>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="isLoggingEnabled">Use to disable logging. (Optional)</param>
            <param name="logger">The <see cref="T:DbConnector.Core.IDbConnectorLogger"/> to use. The logger from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item will be used by default when null. (Optional)</param>      
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandledAsync(DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            <para>Note: The <see cref="T:System.Data.Common.DbConnection"/> will be created based on the first provided <see cref="T:DbConnector.Core.IDbJob"/> item.</para>
            </summary>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandledAsync(System.Data.IsolationLevel,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            <para>Note: The <see cref="T:System.Data.Common.DbConnection"/> will be created based on the first provided <see cref="T:DbConnector.Core.IDbJob"/> item.</para>
            </summary>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> to use.</param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandledAsync(System.Data.Common.DbConnection,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandledAsync(System.Data.Common.DbConnection,System.Data.IsolationLevel,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> to use.</param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandledAsync(System.Data.Common.DbTransaction,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandledAsync(System.Data.Common.DbConnection,System.Data.IsolationLevel,System.Threading.CancellationToken,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> to use. (Optional)</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.DbJob.ExecuteAllHandledAsync(System.Data.Common.DbTransaction,System.Threading.CancellationToken,DbConnector.Core.IDbJob[])">
            <summary>
            Execute all the <see cref="T:DbConnector.Core.IDbJob"/> items and handle any exceptions in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> asynchronously.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for all <see cref="T:DbConnector.Core.IDbJob`1"/> executions.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default, from the first provided <see cref="T:DbConnector.Core.IDbJob"/> item, if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="items">The <see cref="T:DbConnector.Core.IDbJob"/> items to execute in the same <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/>.</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;List&lt;ValueTuple&lt;List&lt;IDbExecutedModel&gt;, dynamic&gt;&gt;&gt;&gt;"/> with all the executed results.</returns>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.GetColumnMaps``1(System.Data.Common.DbDataReader,DbConnector.Core.IColumnMapSetting)">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.IEnumerable`1"/> based on the type of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to use.</typeparam>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="settings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use. (Optional)</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.GetColumnMaps(System.Data.Common.DbDataReader,System.Type,DbConnector.Core.IColumnMapSetting)">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.IEnumerable`1"/> based on the provided type.
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="objType">The <see cref="T:System.Type"/> to use.</param>
            <param name="settings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use. (Optional)</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.ToDataTable(System.Data.Common.DbDataReader,System.Boolean,System.Threading.CancellationToken,DbConnector.Core.IColumnMapSetting)">
            <summary>
            Reads data into a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="isFirstResult">Set to true if only the first row should be loaded.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="settings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use. (Optional)</param>
            <returns>The <see cref="T:System.Data.DataTable"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.ToDataSet(System.Data.Common.DbDataReader,System.Boolean,System.Threading.CancellationToken,DbConnector.Core.IColumnMapSetting,System.Data.DataSet)">
            <summary>
            Reads data into a <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="odr">The <see cref="T:System.Data.DataSet"/> to use.</param>
            <param name="isFirstResult">Set to true if only the first item result should be loaded.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="settings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use. (Optional)</param>
            <returns>The <see cref="T:System.Data.DataSet"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.ToEnumerable``1(System.Data.Common.DbDataReader,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads data into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in a deferred/yielded manner.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The generic type to use.</typeparam>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is missing a parameterless constructor.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is assignable from <see cref="T:System.Collections.IEnumerable"/>.</exception>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.ToEnumerable(System.Data.Common.DbDataReader,System.Type,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads data into an <see cref="!:IEnumerable&lt;object&gt;"/> in a deferred/yielded manner.
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>        
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="objType">The <see cref="T:System.Type"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The <see cref="!:IEnumerable&lt;object&gt;"/>.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <paramref name="objType"/> is missing a parameterless constructor.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <paramref name="objType"/> is assignable from <see cref="T:System.Collections.IEnumerable"/>.</exception>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.ToEnumerable(System.Data.Common.DbDataReader,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads data into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in a deferred/yielded manner.
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.ToEnumerableKeyValuePairs(System.Data.Common.DbDataReader,System.Boolean,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads data into an <see cref="!:IEnumerable&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;"/> in a deferred/yielded manner.
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="isFirstResult">Set to true if only the first row should be loaded.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The <see cref="!:IEnumerable&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.ToEnumerableDictionaries(System.Data.Common.DbDataReader,System.Boolean,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads data into an <see cref="!:IEnumerable&lt;Dictionary&lt;string, object&gt;&gt;"/> in a deferred/yielded manner.
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="isFirstResult">Set to true if only the first row should be loaded.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The <see cref="!:IEnumerable&lt;Dictionary&lt;string, object&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.First``1(System.Data.Common.DbDataReader,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads the first row data into an object of <typeparamref name="T"/> type.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The generic type to use.</typeparam>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The <typeparamref name="T"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.First(System.Data.Common.DbDataReader,System.Type,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads the first row data into an object.
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="objType">The <see cref="T:System.Type"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The object.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <paramref name="objType"/> is missing a parameterless constructor.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <paramref name="objType"/> is assignable from <see cref="T:System.Collections.IEnumerable"/>.</exception>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.First(System.Data.Common.DbDataReader,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads the first row data into a dynamic object.        
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The dynamic object.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.FirstOrDefault``1(System.Data.Common.DbDataReader,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads the first row data into an object of <typeparamref name="T"/> type.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The generic type to use.</typeparam>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The <typeparamref name="T"/>.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is missing a parameterless constructor.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is assignable from <see cref="T:System.Collections.IEnumerable"/>.</exception>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.FirstOrDefault(System.Data.Common.DbDataReader,System.Type,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads the first row data into an object.
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="objType">The <see cref="T:System.Type"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The object.</returns>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.FirstOrDefault(System.Data.Common.DbDataReader,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads the first row data into a dynamic object.      
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The dynamic object.</returns>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.ToHashSet``1(System.Data.Common.DbDataReader,System.Threading.CancellationToken)">
            <summary>
             Reads the first column of each row from the query result into a <see cref="T:System.Collections.Generic.HashSet`1"/>. All other columns are ignored.
             <para>Valid <typeparamref name="T"/> types: Any .NET built-in type or ADO.NET data provider supported type.</para>
            </summary>
            <remarks>
            Note: <see cref="T:System.DBNull"/> values will be excluded.
            </remarks>
            <typeparam name="T">The generic type to use.</typeparam>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="T:System.Collections.Generic.HashSet`1"/>.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is not supported.</exception>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.ToHashSet(System.Data.Common.DbDataReader,System.Threading.CancellationToken)">
            <summary>
             Reads the first column of each row from the query result into a <see cref="!:HashSet&lt;object&gt;"/>. All other columns are ignored.
            </summary>
            <remarks>
            Note: <see cref="T:System.DBNull"/> values will be excluded.
            </remarks>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:HashSet&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.ToList``1(System.Data.Common.DbDataReader,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads data into a <see cref="T:System.Collections.Generic.List`1"/>.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The generic type to use.</typeparam>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/>.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is missing a parameterless constructor.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is assignable from <see cref="T:System.Collections.IEnumerable"/>.</exception>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.ToList(System.Data.Common.DbDataReader,System.Type,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads data into a <see cref="!:List&lt;object&gt;"/>.
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="objType">The <see cref="T:System.Type"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The <see cref="!:List&lt;object&gt;"/>.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <paramref name="objType"/> is missing a parameterless constructor.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <paramref name="objType"/> is assignable from <see cref="T:System.Collections.IEnumerable"/>.</exception>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.ToList(System.Data.Common.DbDataReader,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads data into a <see cref="T:System.Collections.Generic.List`1"/>.        
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.ToKeyValuePairs(System.Data.Common.DbDataReader,System.Boolean,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads data into a <see cref="!:List&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;"/>.
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="isFirstResult">Set to true if only the first row should be loaded.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The <see cref="!:List&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.ToDictionaries(System.Data.Common.DbDataReader,System.Boolean,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads data into a <see cref="!:List&lt;Dictionary&lt;string, object&gt;&gt;"/>.
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="isFirstResult">Set to true if only the first row should be loaded.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The <see cref="!:List&lt;Dictionary&lt;string, object&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.Single``1(System.Data.Common.DbDataReader,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads a single row data into an object of <typeparamref name="T"/> type.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The generic type to use.</typeparam>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The <typeparamref name="T"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is missing a parameterless constructor.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is assignable from <see cref="T:System.Collections.IEnumerable"/>.</exception>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.Single(System.Data.Common.DbDataReader,System.Type,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads a single row data into an object.
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="objType">The <see cref="T:System.Type"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The object.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <paramref name="objType"/> is missing a parameterless constructor.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <paramref name="objType"/> is assignable from <see cref="T:System.Collections.IEnumerable"/>.</exception>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.Single(System.Data.Common.DbDataReader,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads a single row data into a dynamic object.       
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The dynamic object.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.SingleOrDefault``1(System.Data.Common.DbDataReader,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads a single row data into an object of <typeparamref name="T"/> type.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The generic type to use.</typeparam>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The <typeparamref name="T"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is missing a parameterless constructor.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is assignable from <see cref="T:System.Collections.IEnumerable"/>.</exception>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.SingleOrDefault(System.Data.Common.DbDataReader,System.Type,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads a single row data into an object.
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="objType">The <see cref="T:System.Type"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The object.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <paramref name="objType"/> is missing a parameterless constructor.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <paramref name="objType"/> is assignable from <see cref="T:System.Collections.IEnumerable"/>.</exception>
        </member>
        <member name="M:DbConnector.Core.Extensions.DbDataReaderExtensions.SingleOrDefault(System.Data.Common.DbDataReader,System.Threading.CancellationToken,DbConnector.Core.IDbJobCommand)">
            <summary>
            Reads a single row data into a dynamic object.        
            </summary>
            <param name="odr">The <see cref="T:System.Data.Common.DbDataReader"/> to use.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="cmd">The <see cref="T:DbConnector.Core.IDbJobCommand"/> to use for data projection and caching. (Optional)</param>
            <returns>The dynamic object.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.Extensions.IEnumerableExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.String)">
            <summary>
            Creates a <see cref="T:System.Data.DataTable"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The element type of the enumerable.</typeparam>
            <param name="data">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> data.</param>
            <param name="isUseColumnAttribute">Set to false to not use the <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute"/> for names. (Optional)</param>
            <param name="tableName">The table name to use for the <see cref="T:System.Data.DataTable"/>. (Optional)</param>
            <returns>The <see cref="T:System.Data.DataTable"/> created from the data.</returns>        
        </member>
        <member name="M:DbConnector.Core.Extensions.QueueExtensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enqueues the elements of the specified collection into the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The type to use.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> to use.</param>
            <param name="collection">
            The collection whose elements should be enqueued into the <see cref="T:System.Collections.Generic.Queue`1"/>. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.
            </param>
        </member>
        <member name="T:DbConnector.Core.IDbConnector">
            <summary>
            A performance-driven and ADO.NET data provider-agnostic ORM library.
            </summary>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``2(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>       
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``3(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>    
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``4(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>          
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``5(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>                 
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``6(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>                        
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``7(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>                        
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``8(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>                        
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``8(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``8(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``7(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``7(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``6(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``6(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``5(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``5(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``4(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``4(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``3(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``3(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``2(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``2(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``2(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``3(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``4(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``5(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``6(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``7(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``8(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``2(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``3(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``4(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``5(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``6(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``7(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``8(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``8(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``8(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``7(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``7(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``6(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``6(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``5(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``5(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``4(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``4(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``3(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``3(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``2(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``2(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``8(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``8(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``7(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``7(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``6(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``6(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``5(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``5(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``4(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``4(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``3(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``3(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``2(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``2(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``2(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>       
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``3(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>       
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``4(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>       
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``5(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>       
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``6(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>       
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``7(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>       
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``8(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>       
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``8(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``8(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``7(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``7(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``6(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``6(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``5(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``5(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``4(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``4(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``3(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``3(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``2(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``2(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``2(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``3(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``4(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``5(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``6(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``7(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``8(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``2(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``3(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``4(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``5(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``6(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``7(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``8(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``8(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``8(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``7(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``7(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``6(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``6(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``5(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``5(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``4(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``4(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``3(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``3(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``2(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``2(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``8(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``8(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``7(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``7(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``6(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``6(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``5(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``5(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``4(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``4(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``3(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``3(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``2(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``2(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.Default"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="P:DbConnector.Core.IDbConnector.ConnectionString">
            <summary>
            Gets the string used to open the connection.
            </summary>
        </member>
        <member name="P:DbConnector.Core.IDbConnector.ConnectionType">
            <summary>
            Gets the type of <see cref="T:System.Data.Common.DbConnection"/> being used.
            </summary>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;T&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;T&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;List&lt;T&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToDataTable(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;System.Data.DataTable&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;System.Data.DataTable&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToDataSet(System.Action{System.Collections.Generic.Queue{System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;System.Data.DataSet&gt;"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <param name="onInit">Action that is used to configure and enqueue all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>     
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;System.Data.DataSet&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToHashSet``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;HashSet&lt;T&gt;&gt;"/> able to read the first column of each row from the query result based on the <paramref name="onInit"/> action. All other columns are ignored.</para>
             <para>Valid <typeparamref name="T"/> types: any .NET built-in type or ADO.NET data provider supported type.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="!:IDbJob&lt;HashSet&lt;T&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is not supported.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToKeyValuePairs(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>This is usefull when requiring a generic data list from the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToDictionaries(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.
             This is usefull when requiring a non-concrete data list from unique columns of the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToListOfKeyValuePairs(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>This is usefull when requiring a generic data list from the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="!:IDbJob&lt;List&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToListOfDictionaries(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.
             This is usefull when requiring a non-concrete data list from unique columns of the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;List&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToDbCollectionSet(System.Action{System.Collections.Generic.Queue{System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>This is usefull when wanting to create a concrete object from multiple/different queries.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <param name="onInit">Action that is used to configure and enqueue all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadTo``1(System.Action{System.Collections.Generic.Queue{System.Action{DbConnector.Core.IDbJobCommand}}},System.Func{``0,DbConnector.Core.IDbExecutionModel,System.Data.Common.DbDataReader,``0})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to load the data based on the <paramref name="onLoad"/> action.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="onInit">Action that is used to configure and enqueue all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <param name="onLoad">Function that is used to access the generated <see cref="T:System.Data.Common.DbDataReader"/> and transform the <typeparamref name="T"/> result.</param>        
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when onLoad is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Scalar``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> to get the first column of the first row from the result
             set returned by the query. All other columns and rows are ignored.</para>
             <para>Valid <typeparamref name="T"/> types: any .NET built-in type or ADO.NET data provider supported type.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is not supported.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.NonQuery(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;int?&gt;"/> able to execute a non-query based on the <paramref name="onInit"/> action.</para>
             <para> The result will be null if the non-query fails. Otherwise, the result will be the number of rows affected if the non-query ran successfully.</para>
             <para>Note: A <see cref="T:System.Data.Common.DbTransaction"/> with <see cref="F:System.Data.IsolationLevel.ReadCommitted"/> will be used by default.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
            </summary>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;int?&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.NonQuery``1(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a non-query based on the <paramref name="onInit"/> action.</para>
             <para>Note: A <see cref="T:System.Data.Common.DbTransaction"/> with <see cref="F:System.Data.IsolationLevel.ReadCommitted"/> will be used by default.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.NonQueries(System.Action{System.Collections.Generic.Queue{System.Action{DbConnector.Core.IDbJobCommand}}})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;int?&gt;"/> able to execute all non-queries based on the <paramref name="onInit"/> action.</para>
             <para>The result will be null if a non-query fails. Otherwise, the result will be the number of rows affected if all non-queries ran successfully.</para>
             <para>Note: A <see cref="T:System.Data.Common.DbTransaction"/> with <see cref="F:System.Data.IsolationLevel.ReadCommitted"/> will be used by default.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
            </summary>
            <param name="onInit">Action that is used to configure and enqueue all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="!:IDbJob&lt;int?&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.NonQueries``1(System.Action{System.Collections.Generic.Queue{System.Action{DbConnector.Core.IDbJobCommand}}})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute all non-queries based on the <paramref name="onInit"/> action.</para>
             <para>Note: A <see cref="T:System.Data.Common.DbTransaction"/> with <see cref="F:System.Data.IsolationLevel.ReadCommitted"/> will be used by default.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
            </summary>
            <param name="onInit">Action that is used to configure and enqueue all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Build``1(System.Action{System.Collections.Generic.Queue{System.Action{DbConnector.Core.IDbJobCommand}}},System.Func{``0,DbConnector.Core.IDbExecutionModel,``0},System.Boolean)">
            <summary>
             Creates a <see cref="T:DbConnector.Core.IDbJob`1"/> which can be controlled 
             by the <see cref="T:DbConnector.Core.IDbExecutionModel"/> properties of the <see cref="!:IDbJob&lt;T&gt;.OnExecuted(Func&lt;T, IDbExecutionModel, T&gt;)"/> function.
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="onInit">Action that is used to configure and enqueue all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.<para>Note: This can only be null if <paramref name="isCreateDbCommand"/> is set to false.</para></param>
            <param name="onExecute">Function that will be invoked for each <see cref="T:DbConnector.Core.IDbJobCommand"/> and can be used to execute database calls and set the <typeparamref name="T"/> result.</param>
            <param name="isCreateDbCommand">Set this to false to disable the auto creation of a <see cref="T:System.Data.Common.DbCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.IsConnected">
            <summary>
            Check if the database is available based on the provided connection string.
            </summary>
            <returns>The <see cref="!:IDbJob&lt;bool&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;dynamic&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>   
             <para>Use this to dynamically load the query results into an IEnumerable of <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;dynamic&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to dynamically load only the first row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to dynamically load only the first row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to dynamically load only a single row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to dynamically load only a single row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;dynamic&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>   
             <para>Use this to dynamically load the query results into a List of <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;List&lt;dynamic&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;dynamic&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>   
             <para>Use this to dynamically load the query results into an IEnumerable of <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;dynamic&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;dynamic&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>   
             <para>Use this to dynamically load the query results into an IEnumerable of <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>        
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;dynamic&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to dynamically load only the first row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>      
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to dynamically load only the first row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>  
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to dynamically load only the first row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to dynamically load only the first row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to dynamically load only a single row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to dynamically load only a single row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to dynamically load only a single row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to dynamically load only a single row from the query result into a <see cref="T:System.Dynamic.ExpandoObject"/>.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;dynamic&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>   
             <para>Use this to dynamically load the query results into a List of <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;List&lt;dynamic&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;dynamic&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>   
             <para>Use this to dynamically load the query results into a List of <see cref="T:System.Dynamic.ExpandoObject"/>.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;List&lt;dynamic&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``2(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``3(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``4(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``5(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``6(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``7(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``8(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand}}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``2(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``3(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``4(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``5(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``6(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``7(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``8(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand}}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``2(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``3(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``4(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``5(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``6(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``7(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``8(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand}}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``2(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>      
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``3(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``4(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``5(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``6(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``7(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``8(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand}}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>       
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>      
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``2(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``3(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``4(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``5(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``6(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``7(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``8(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand}}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``2(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``3(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``4(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``5(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``6(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``7(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``8(System.Func{System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.Action{DbConnector.Core.IDbJobCommand},System.ValueTuple{System.Action{DbConnector.Core.IDbJobCommand}}}},System.Nullable{System.Boolean})">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob"/> able to execute readers based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query into a result of T.</para>
             <para>Valid T types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="onInit">Func delegate that is used to configure all the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <param name="withIsolatedConnections">By default, one database connection per command will be created/opened thus potentially returning a faster result. See also: <see cref="F:DbConnector.Core.DbConnectorFlags.NoIsolatedConnectionPerCommand"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;T&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;T&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param>        
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param>        
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param>        
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param>        
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param>        
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query into a result of <typeparamref name="T"/>.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;T&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;T&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <typeparam name="T">The element type to use for the single result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param>        
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToDataTable(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;System.Data.DataTable&gt;"/> able to execute a reader based on the configured parameters.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;System.Data.DataTable&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToDataTable(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;System.Data.DataTable&gt;"/> able to execute a reader based on the configured parameters.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>        
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;System.Data.DataTable&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToDataSet(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;System.Data.DataSet&gt;"/> able to execute a reader based on the configured parameters.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;System.Data.DataSet&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToDataSet(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;System.Data.DataSet&gt;"/> able to execute a reader based on the configured parameters.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;System.Data.DataSet&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToHashSet``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;HashSet&lt;T&gt;&gt;"/> able to read the first column of each row from the query result based on the configured parameters. All other columns are ignored.</para>
             <para>Valid <typeparamref name="T"/> types: any .NET built-in type or ADO.NET data provider supported type.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default. <see cref="T:System.DBNull"/> values will be excluded.
            </remarks>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;HashSet&lt;T&gt;&gt;"/>.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is not supported.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToHashSet``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;HashSet&lt;T&gt;&gt;"/> able to read the first column of each row from the query result based on the configured parameters. All other columns are ignored.</para>
             <para>Valid <typeparamref name="T"/> types: any .NET built-in type or ADO.NET data provider supported type.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default. <see cref="T:System.DBNull"/> values will be excluded.
            </remarks>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>        
            <returns>The <see cref="!:IDbJob&lt;HashSet&lt;T&gt;&gt;"/>.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is not supported.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToKeyValuePairs(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>This is usefull when requiring a generic data list from the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToKeyValuePairs(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>This is usefull when requiring a generic data list from the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>       
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToDictionaries(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/> able to execute a reader based on the configured parameters.
             This is usefull when requiring a non-concrete data list from unique columns of the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToDictionaries(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/> able to execute a reader based on the configured parameters.
             This is usefull when requiring a non-concrete data list from unique columns of the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToListOfKeyValuePairs(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>This is usefull when requiring a generic data list from the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;List&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToListOfKeyValuePairs(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>This is usefull when requiring a generic data list from the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;List&lt;List&lt;KeyValuePair&lt;string, object&gt;&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToListOfDictionaries(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/> able to execute a reader based on the configured parameters.
             This is usefull when requiring a non-concrete data list from unique columns of the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;List&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToListOfDictionaries(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/> able to execute a reader based on the configured parameters.
             This is usefull when requiring a non-concrete data list from unique columns of the query result.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;List&lt;Dictionary&lt;string, object&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToDbCollectionSet(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>This is usefull when wanting to create a concrete object from multiple/different queries.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToDbCollectionSet(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a reader based on the configured parameters.</para>
             <para>This is usefull when wanting to create a concrete object from multiple/different queries.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadTo``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Func{``0,DbConnector.Core.IDbExecutionModel,System.Data.Common.DbDataReader,``0},System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to load the data based on the <paramref name="onLoad"/> action.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param>        
            <param name="param">The parameter to use (or null for empty). <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply.</param> 
            <param name="onLoad">Function that is used to access the generated <see cref="T:System.Data.Common.DbDataReader"/> and transform the <typeparamref name="T"/> result.</param>
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onLoad is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadTo``1(System.String,System.Object,System.Func{``0,DbConnector.Core.IDbExecutionModel,System.Data.Common.DbDataReader,``0},System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to load the data based on the <paramref name="onLoad"/> action.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param>     
            <param name="param">The parameter to use (or null for empty). <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply.</param> 
            <param name="onLoad">Function that is used to access the generated <see cref="T:System.Data.Common.DbDataReader"/> and transform the <typeparamref name="T"/> result.</param>
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onLoad is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Scalar``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> to get the first column of the first row from the result
             set returned by the query. All other columns and rows are ignored.</para>
             <para>Valid <typeparamref name="T"/> types: any .NET built-in type or ADO.NET data provider supported type.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is not supported.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Scalar``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> to get the first column of the first row from the result
             set returned by the query. All other columns and rows are ignored.</para>
             <para>Valid <typeparamref name="T"/> types: any .NET built-in type or ADO.NET data provider supported type.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> is not supported.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.NonQuery(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;int?&gt;"/> able to execute a non-query based on the configured parameters.</para>
             <para> The result will be null if the non-query fails. Otherwise, the result will be the number of rows affected if the non-query ran successfully.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
            </summary>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;int?&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.NonQuery(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;int?&gt;"/> able to execute a non-query based on the configured parameters.</para>
             <para> The result will be null if the non-query fails. Otherwise, the result will be the number of rows affected if the non-query ran successfully.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
            </summary>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;int?&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.NonQuery``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a non-query based on the configured parameters.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.NonQuery``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="T:DbConnector.Core.IDbJob`1"/> able to execute a non-query based on the configured parameters.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Build``1(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Func{``0,DbConnector.Core.IDbExecutionModel,``0},System.Boolean,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             Creates a <see cref="T:DbConnector.Core.IDbJob`1"/> which can be controlled 
             by the <see cref="T:DbConnector.Core.IDbExecutionModel"/> properties of the <see cref="!:IDbJob&lt;T&gt;.OnExecuted(Func&lt;T, IDbExecutionModel, T&gt;)"/> function.
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param>        
            <param name="param">The parameter to use (or null for empty). <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply.</param> 
            <param name="onExecute">Function that will be invoked for each <see cref="T:DbConnector.Core.IDbJobCommand"/> and can be used to execute database calls and set the <typeparamref name="T"/> result.</param>
            <param name="isCreateDbCommand">Set this to false to disable the auto creation of a <see cref="T:System.Data.Common.DbCommand"/>. (Optional)</param>
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onExecute is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Build``1(System.String,System.Object,System.Func{``0,DbConnector.Core.IDbExecutionModel,``0},System.Boolean,System.Data.CommandType)">
            <summary>
             Creates a <see cref="T:DbConnector.Core.IDbJob`1"/> which can be controlled 
             by the <see cref="T:DbConnector.Core.IDbExecutionModel"/> properties of the <see cref="!:IDbJob&lt;T&gt;.OnExecuted(Func&lt;T, IDbExecutionModel, T&gt;)"/> function.
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="sql">The query text command to run against the data source.</param>   
            <param name="param">The parameter to use (or null for empty). <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply.</param> 
            <param name="onExecute">Function that will be invoked for each <see cref="T:DbConnector.Core.IDbJobCommand"/> and can be used to execute database calls and set the <typeparamref name="T"/> result.</param>
            <param name="isCreateDbCommand">Set this to false to disable the auto creation of a <see cref="T:System.Data.Common.DbCommand"/>. (Optional)</param>
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <returns>The <see cref="T:DbConnector.Core.IDbJob`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onExecute is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read(System.Type,System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;object&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;object&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst(System.Type,System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault(System.Type,System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only the first row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle(System.Type,System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault(System.Type,System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
             <para>Use this to load only a single row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>       
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList(System.Type,System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;object&gt;&gt;"/> able to execute a reader based on the <paramref name="onInit"/> action.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>        
            <returns>The <see cref="!:IDbJob&lt;List&lt;object&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToHashSet(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;HashSet&lt;object&gt;&gt;"/> able to read the first column of each row from the query result based on the <paramref name="onInit"/> action. All other columns are ignored.</para>  
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default. <see cref="T:System.DBNull"/> values will be excluded.
            </remarks>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="!:IDbJob&lt;HashSet&lt;object&gt;&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Scalar(System.Action{DbConnector.Core.IDbJobCommand})">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> to get the first column of the first row from the result
             set returned by the query. All other columns and rows are ignored.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>
            </summary>
            <param name="onInit">Action that is used to configure the <see cref="T:DbConnector.Core.IDbJobCommand"/>.</param>
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when onInit is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read(System.Type,DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;object&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;object&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Read(System.Type,System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;IEnumerable&lt;object&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="sql">The query text command to run against the data source.</param>        
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;IEnumerable&lt;object&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst(System.Type,DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirst(System.Type,System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault(System.Type,DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadFirstOrDefault(System.Type,System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only the first row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> and <see cref="F:System.Data.CommandBehavior.SingleRow"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle(System.Type,DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingle(System.Type,System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result is empty.</exception>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault(System.Type,DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadSingleOrDefault(System.Type,System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> able to execute a reader based on the configured parameters.</para>
             <para>Use this to load only a single row from the query result into an object.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The query result has more than one result.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList(System.Type,DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;object&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;List&lt;object&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToList(System.Type,System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;List&lt;object&gt;&gt;"/> able to execute a reader based on the configured parameters.</para>
            <para>Valid types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;List&lt;object&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToHashSet(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;HashSet&lt;object&gt;&gt;"/> able to read the first column of each row from the query result based on the configured parameters. All other columns are ignored.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default. <see cref="T:System.DBNull"/> values will be excluded.
            </remarks>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;HashSet&lt;object&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.ReadToHashSet(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;HashSet&lt;object&gt;&gt;"/> able to read the first column of each row from the query result based on the configured parameters. All other columns are ignored.</para>
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader"/>
            </summary>
            <remarks>
            This will use the <see cref="F:System.Data.CommandBehavior.SingleResult"/> behavior by default. <see cref="T:System.DBNull"/> values will be excluded.
            </remarks>
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>        
            <returns>The <see cref="!:IDbJob&lt;HashSet&lt;object&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Scalar(DbConnector.Core.IColumnMapSetting,System.String,System.Object,System.Data.CommandType,System.Nullable{System.Data.CommandBehavior},System.Nullable{System.Int32},DbConnector.Core.DbJobCommandFlags)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> to get the first column of the first row from the result
             set returned by the query. All other columns and rows are ignored.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>
            </summary>
            <param name="mapSettings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param> 
            <param name="sql">The query text command to run against the data source.</param> 
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param> 
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> to use. (Optional)</param> 
            <param name="commandTimeout">The time in seconds to wait for the command to execute. (Optional)</param> 
            <param name="flags">The flags to use. (Optional)</param> 
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbConnector.Scalar(System.String,System.Object,System.Data.CommandType)">
            <summary>
             <para>Creates an <see cref="!:IDbJob&lt;object&gt;"/> to get the first column of the first row from the result
             set returned by the query. All other columns and rows are ignored.</para>        
             See also:
             <seealso cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>
            </summary>
            <param name="sql">The query text command to run against the data source.</param>
            <param name="param">The parameter to use. <see cref="M:DbConnector.Core.DbJobParameterCollection.AddFor(System.Object,System.Boolean,System.String,System.String)"/> restrictions apply. (Optional)</param> 
            <param name="commandType">The <see cref="T:System.Data.CommandType"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbJob&lt;object&gt;"/>.</returns>
        </member>
        <member name="T:DbConnector.Core.IDbConnector`1">
            <summary>
            A performance-driven and ADO.NET data provider-agnostic ORM library.
            </summary>
        </member>
        <member name="P:DbConnector.Core.IDbJobCommand.CommandType">
            <summary>
            Use to set the command type and override the default Text CommandType.
            </summary>
        </member>
        <member name="P:DbConnector.Core.IDbJobCommand.CommandText">
            <summary>
            Gets or sets the text command to run against the data source.
            </summary>
        </member>
        <member name="P:DbConnector.Core.IDbJobCommand.CommandTimeout">
            <summary>
            The time in seconds to wait for the command to execute.
            </summary>
        </member>
        <member name="M:DbConnector.Core.IDbJobCommand.GetDbParameters">
            <summary>
            Get the referenced <see cref="T:System.Data.Common.DbParameterCollection"/>. This can be useful when wanting to cast and insert type specific parameters.
            </summary>
            <returns><see cref="T:System.Data.Common.DbParameterCollection"/></returns>
        </member>
        <member name="M:DbConnector.Core.IDbJobCommand.GetDbCommand">
            <summary>
            Get the referenced <see cref="T:System.Data.Common.DbCommand"/>.
            </summary>
            <returns><see cref="T:System.Data.Common.DbCommand"/></returns>
        </member>
        <member name="M:DbConnector.Core.IColumnMapSetting.WithSplitOn``1(System.String)">
            <summary>
            Set the starting/locator inclusive column name to use when mapping an object of <typeparamref name="T"/> type.
            </summary>
            <typeparam name="T">The object type to use.</typeparam>
            <param name="columnName">The column name to use.</param>
            <returns>The current <see cref="T:DbConnector.Core.IColumnMapSetting"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="columnName"/> is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IColumnMapSetting.WithSplitOnFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Set the starting/locator inclusive column name to use when mapping an object of <typeparamref name="T"/> type.
            </summary>
            <typeparam name="T">The object type to use.</typeparam>
            <param name="expression">The expression to use.</param>
            <param name="isUseColumnAttribute">Set to false to not use the <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute"/> for names. (Optional)</param>
            <returns>The current <see cref="T:DbConnector.Core.IColumnMapSetting"/>.</returns>
            <exception cref="T:System.MemberAccessException">Thrown when the provided expression's property is not a member of <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:DbConnector.Core.IColumnMapSetting.WithSplitOn(System.Type,System.String)">
            <summary>
            Set the starting/locator inclusive column name to use when mapping an object of the specified type.
            </summary>
            <param name="tType">The object <see cref="T:System.Type"/> to use.</param>
            <param name="columnName">The column name to use.</param>
            <returns>The current <see cref="T:DbConnector.Core.IColumnMapSetting"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="columnName"/> is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbCollectionSet.DequeueFirstOrDefault``1">
            <summary>
            Removes and returns the first element of the data collection.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <returns>The object of <typeparamref name="T"/> type.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> does not match the value type or <typeparamref name="T"/> is a class without a parameterless constructor.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbCollectionSet.DequeueFirstOrDefault``1(DbConnector.Core.IColumnMapSetting)">
            <summary>
            Removes and returns the first element of the data collection.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="settings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param>
            <returns>The object of <typeparamref name="T"/> type.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> does not match the value type or <typeparamref name="T"/> is a class without a parameterless constructor.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbCollectionSet.Dequeue``1">
            <summary>
            Removes and returns the data as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> result.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> does not match the value type or <typeparamref name="T"/> is a class without a parameterless constructor.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbCollectionSet.Dequeue``1(DbConnector.Core.IColumnMapSetting)">
            <summary>
            Removes and returns the data as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="settings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> result.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> does not match the value type or <typeparamref name="T"/> is a class without a parameterless constructor.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbCollectionSet.ElementAt``1(System.Int32)">
            <summary>
            Returns the first element of the data collection.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="index">The index to use.</param>
            <returns>The object of <typeparamref name="T"/> type.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> does not match the value type or <typeparamref name="T"/> is a class without a parameterless constructor.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbCollectionSet.ElementAt``1(System.Int32,DbConnector.Core.IColumnMapSetting)">
            <summary>
            Returns the first element of the data collection.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="index">The index to use.</param>
            <param name="settings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param>
            <returns>The object of <typeparamref name="T"/> type.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> does not match the value type or <typeparamref name="T"/> is a class without a parameterless constructor.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbCollectionSet.ElementsAt``1(System.Int32)">
            <summary>
            Returns the data as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="index">The index to use.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> result.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> does not match the value type or <typeparamref name="T"/> is a class without a parameterless constructor.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbCollectionSet.ElementsAt``1(System.Int32,DbConnector.Core.IColumnMapSetting)">
            <summary>
            Returns the data as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.
             <para>Valid <typeparamref name="T"/> types: <see cref="T:System.Data.DataSet"/>, <see cref="T:System.Data.DataTable"/>, <see cref="!:Dictionary&lt;string,object&gt;"/>, any .NET built-in type, or any struct or class with a parameterless constructor not assignable from <see cref="T:System.Collections.IEnumerable"/> (Note: only properties will be mapped).</para>
            </summary>
            <typeparam name="T">The element type to use for the result.</typeparam>
            <param name="index">The index to use.</param>
            <param name="settings">The <see cref="T:DbConnector.Core.IColumnMapSetting"/> to use.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> result.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <typeparamref name="T"/> does not match the value type or <typeparamref name="T"/> is a class without a parameterless constructor.</exception>
        </member>
        <member name="P:DbConnector.Core.IDbExecutionModel.Connection">
            <summary>
            The DbConnection which will be disposed internally within a "finally" statement.
            </summary>
        </member>
        <member name="P:DbConnector.Core.IDbExecutionModel.Transaction">
            <summary>
            The DbTransaction which will be "committed" (or "rolled back" on exceptions) automatically and disposed internally within a "finally" statement.
            </summary>
        </member>
        <member name="P:DbConnector.Core.IDbExecutionModel.Command">
            <summary>
            <para>
            The <see cref="T:System.Data.Common.DbCommand"/> which will be disposed internally within a "finally" statement.        
            </para>
             See also:
             <seealso cref="M:System.Data.Common.DbConnection.CreateCommand"/>
            </summary>
        </member>
        <member name="P:DbConnector.Core.IDbExecutionModel.JobCommand">
            <summary>
            The <see cref="T:DbConnector.Core.IDbJobCommand"/> being executed.
            </summary>
        </member>
        <member name="P:DbConnector.Core.IDbExecutionModel.DeferrableDisposables">
            <summary>
            Externally created <see cref="T:System.IDisposable"/> objects (e.g. <see cref="T:System.Data.Common.DbDataReader"/>) which have to be disposed internally within a "finally" statement.
            <para>This Queue has to be used in order to support the non-buffered or disposable execution of an <see cref="T:DbConnector.Core.IDbJob`1"/>.</para>
            <para>Note: This will be <see cref="!:null"/> for buffered/non-disposable <see cref="T:DbConnector.Core.IDbJob`1"/> executions. In this case, use either the <see cref="M:DbConnector.Core.IDbExecutionModel.DeferDisposable(System.IDisposable)"/> function, a "try/finally" block, or an "using" statement instead.</para>
            </summary>
        </member>
        <member name="M:DbConnector.Core.IDbExecutionModel.DeferDisposable(System.IDisposable)">
            <summary>
            Used to defer the disposal of an <see cref="T:System.IDisposable"/> object to the current <see cref="T:DbConnector.Core.IDbJob`1"/>'s "finally" statement.
            <para>This can only be used for a single disposable, instead of the <see cref="P:DbConnector.Core.IDbExecutionModel.DeferrableDisposables"/> property, in order to reduce memory usage for buffered/non-disposable <see cref="T:DbConnector.Core.IDbJob`1"/> execution.</para>
            <para>Note: Use either a "try/finally" block or an "using" statement instead.</para>
            </summary>
            <param name="disposable">The <see cref="T:System.IDisposable"/> object to defer.</param>
        </member>
        <member name="P:DbConnector.Core.IDbExecutionModel.JobState">
            <summary>
            The current <see cref="T:DbConnector.Core.IDbJob`1"/> state.
            </summary>
        </member>
        <member name="P:DbConnector.Core.IDbExecutedModel.IsDisposable">
            <summary>
            Return true if <see cref="T:DbConnector.Core.IDbJob`1"/> was executed as "disposable".
            </summary>
        </member>
        <member name="P:DbConnector.Core.IDbExecutedModel.Index">
            <summary>
            The current executed <see cref="T:DbConnector.Core.IDbJobCommand"/> index. This is internally assigned and can be used for tracking purposes.
            </summary>
        </member>
        <member name="T:DbConnector.Core.IDbDisposable`1">
            <summary>
            An instance of this implementation needs to be disposed. Otherwise, the <see cref="T:System.Data.Common.DbConnection"/> will not be closed and other disposable objects will remain in memory.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="M:DbConnector.Core.IDbDisposable`1.Dispose(System.Boolean)">
            <summary>
            The DbTransaction of the DbJob which will be disposed internally when calling the <see cref="M:System.IDisposable.Dispose"/> function.
            </summary>
        </member>
        <member name="T:DbConnector.Core.IDbJob">
            <summary>
            Represents a base interface for a configurable and executable database job.
            </summary>
        </member>
        <member name="P:DbConnector.Core.IDbJob.ConnectionString">
            <summary>
            Gets the string used to open the connection.
            </summary>
        </member>
        <member name="P:DbConnector.Core.IDbJob.ConnectionType">
            <summary>
            Gets the type of <see cref="T:System.Data.Common.DbConnection"/> being used.
            </summary>
        </member>
        <member name="T:DbConnector.Core.IDbJob`1">
            <summary>
            Represents a generic interface for a configurable and executable database job.
            </summary>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.Execute(System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJob`1"/>.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>       
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The T result.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.Execute(System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJob`1"/>.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The T result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="transaction"/> is null.</exception>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.ExecuteAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJob`1"/> asynchronously.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.ExecuteAsync(System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJob`1"/> asynchronously.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.ExecuteHandled(System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJob`1"/> and handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbResult`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.ExecuteHandled(System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJob`1"/> and handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbResult`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.ExecuteHandledAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJob`1"/> and handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/> asynchronously.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.ExecuteHandledAsync(System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJob`1"/> and handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/> asynchronously.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.ExecuteDisposable(System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Use this function when a serialized data extraction is required. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbDisposable`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.ExecuteDisposable(System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Use this function when a serialized data extraction is required. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbDisposable`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.ExecuteDisposableAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Use this asynchronous function when a serialized data extraction is required. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbDisposable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.ExecuteDisposableAsync(System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Use this asynchronous function when a serialized data extraction is required. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbDisposable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.ExecuteDisposableHandled(System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Use this function when a serialized data extraction is required and to handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbResult&lt;IDbDisposable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.ExecuteDisposableHandled(System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            Use this function when a serialized data extraction is required and to handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbResult&lt;IDbDisposable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.ExecuteDisposableHandledAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Use this asynchronous function when a serialized data extraction is required and to handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;IDbDisposable&lt;T&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.ExecuteDisposableHandledAsync(System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            Use this asynchronous function when a serialized data extraction is required and to handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJob`1"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;IDbDisposable&lt;T&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.WithBuffering(System.Boolean)">
            <summary>
            <para>Use this function to disable or enable buffered (non-deferred/non-yielded) execution when reading data (this is enabled by default).</para>
            <para>Note: Deferred execution is only possible for <see cref="T:System.Collections.IEnumerable"/> types during individual transactions. Consequently, normal execution will be used when encountering non <see cref="T:System.Collections.IEnumerable"/> types or Batch-Reading implementations.</para>
            Warning: Exceptions may occur while looping deferred <see cref="T:System.Collections.IEnumerable"/> types because of the implicit database connection dependency.
            </summary>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.WithCache(System.Boolean)">
            <summary>
            <para>Use this function to disable or enable the caching of query mappings and types for a all <see cref="T:DbConnector.Core.DbJobCommand"/> owned by this <see cref="T:DbConnector.Core.IDbJob`1"/>.</para>
            </summary>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.WithLogging(System.Boolean)">
            <summary>
            Use this function to disable or enable error logging (this is enabled by default). Disabling this can be useful when logging errors in order to prevent an infinite loop.
            </summary>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Use this function to set the <see cref="T:System.Data.IsolationLevel"/> and enable the use of a <see cref="T:System.Data.Common.DbTransaction"/> for this <see cref="T:DbConnector.Core.IDbJob`1"/>.
            </summary>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.OnExecuted(System.Func{`0,DbConnector.Core.IDbExecutedModel,`0},DbConnector.Core.EventSetting)">
            <summary>
            Use this to set the delegate to call after a DbCommand is executed. You can use this function to change the <see cref="!:&lt;T&gt;"/> result.
            </summary>
            <param name="action">The action to invoke.</param>
            <param name="setting">The event setting to use. (Optional)</param>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.OnCompleted(System.Func{`0,`0},DbConnector.Core.EventSetting)">
            <summary>
            Use this to set the delegate to call after all DbCommands are executed without errors. You can use this function to change the <see cref="!:&lt;T&gt;"/> result.
            </summary>
            <param name="action">The action to invoke.</param>
            <param name="setting">The event setting to use. (Optional)</param>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.OnError(System.Func{`0,System.Exception,`0},DbConnector.Core.EventSetting)">
            <summary>
            Use this to set the delegate to call when an error occurs. You can use this function to change the <see cref="!:&lt;T&gt;"/> result.
            </summary>
            <param name="action">The action to invoke.</param>
            <param name="setting">The event setting to use. (Optional)</param>
            <returns><see cref="T:DbConnector.Core.IDbJob`1"/></returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.ToCacheable``1(``0)">
            <summary>
            Use this to create an <see cref="T:DbConnector.Core.IDbJobCacheable`2"/>.
            <para>Note: This should only be used when wanting to cache the current <see cref="T:DbConnector.Core.IDbJob`1"/> (e.g. when caching in a static field).</para>
            </summary>
            <typeparam name="TStateParamValue">The state parameter type to use.</typeparam>
            <param name="value">The state parameter value to use</param>
            <returns>The new <see cref="T:DbConnector.Core.IDbJobCacheable`2"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJob`1.ToCacheable``1">
            <summary>
            Use this to create an <see cref="T:DbConnector.Core.IDbJobCacheable`2"/>.
            <para>Note: This should only be used when wanting to cache the current <see cref="T:DbConnector.Core.IDbJob`1"/> (e.g. when caching in a static field).</para>
            </summary>
            <typeparam name="TStateParamValue">The state parameter type to use.</typeparam>
            <returns>The new <see cref="T:DbConnector.Core.IDbJobCacheable`2"/>.</returns>
        </member>
        <member name="T:DbConnector.Core.IDbJobCacheable`2">
            <summary>
            Represents a generic interface for a cacheable, configurable, and executable database job.
            </summary>
        </member>
        <member name="M:DbConnector.Core.IDbJobCacheable`2.Execute(`1,System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJobCacheable`2"/>.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>      
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The T result.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJobCacheable`2.Execute(`1,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJobCacheable`2"/>.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>    
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The T result.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJobCacheable`2.ExecuteAsync(`1,System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> asynchronously.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJobCacheable`2.ExecuteAsync(`1,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> asynchronously.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>  
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJobCacheable`2.ExecuteHandled(`1,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> and handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbResult`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJobCacheable`2.ExecuteHandled(`1,System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> and handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>  
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbResult`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJobCacheable`2.ExecuteHandledAsync(`1,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> and handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/> asynchronously.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJobCacheable`2.ExecuteHandledAsync(`1,System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            Execute the <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> and handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/> asynchronously.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>  
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJobCacheable`2.ExecuteDisposable(`1,System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Use this function when a serialized data extraction is required. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbDisposable`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJobCacheable`2.ExecuteDisposable(`1,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Use this function when a serialized data extraction is required. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param> 
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="T:DbConnector.Core.IDbDisposable`1"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJobCacheable`2.ExecuteDisposableAsync(`1,System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Use this asynchronous function when a serialized data extraction is required. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbDisposable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJobCacheable`2.ExecuteDisposableAsync(`1,System.Data.Common.DbTransaction,System.Threading.CancellationToken,System.Nullable{System.Boolean})">
            <summary>
            Use this asynchronous function when a serialized data extraction is required. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param> 
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <param name="isThrowExceptions">Use to override the <see cref="F:DbConnector.Core.DbConnectorFlags.NoExceptionThrowingForNonHandledExecution"/>. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbDisposable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJobCacheable`2.ExecuteDisposableHandled(`1,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Use this function when a serialized data extraction is required and to handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbResult&lt;IDbDisposable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJobCacheable`2.ExecuteDisposableHandled(`1,System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            Use this function when a serialized data extraction is required and to handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param> 
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:IDbResult&lt;IDbDisposable&lt;T&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJobCacheable`2.ExecuteDisposableHandledAsync(`1,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Use this asynchronous function when a serialized data extraction is required and to handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="connection">The <see cref="T:System.Data.Common.DbConnection"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution. (Optional)
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;IDbDisposable&lt;T&gt;&gt;&gt;"/>.</returns>
        </member>
        <member name="M:DbConnector.Core.IDbJobCacheable`2.ExecuteDisposableHandledAsync(`1,System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
            Use this asynchronous function when a serialized data extraction is required and to handle any exceptions while opening the <see cref="T:System.Data.Common.DbConnection"/>. E.g. When using <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> to get a <see cref="T:System.IO.Stream"/>.
            This function returns an <see cref="T:System.IDisposable"/> object that must me disposed in order to commit the transaction and prevent leaks.
            </summary>
            <param name="parameter">The state parameter to use.</param>
            <param name="transaction">The <see cref="T:System.Data.Common.DbTransaction"/> to use for this <see cref="T:DbConnector.Core.IDbJobCacheable`2"/> execution.
            <para>Note: A new <see cref="T:System.Data.Common.DbConnection"/> will be created automatically by default if this parameter is null.</para>
            <para>Note: This will override the use of <see cref="M:DbConnector.Core.IDbJob`1.WithIsolationLevel(System.Nullable{System.Data.IsolationLevel})"/>.</para>
            <para>Warning: Multiple Active Result Sets (MARS) needs to be supported and enabled when executing multiple <see cref="T:System.Data.Common.DbCommand"/> simultaneously in the same <see cref="T:System.Data.Common.DbConnection"/>. Regardless, the use of isolated connections is encouraged.</para>
            </param> 
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> to use. (Optional)</param>
            <returns>The <see cref="!:Task&lt;IDbResult&lt;IDbDisposable&lt;T&gt;&gt;&gt;"/>.</returns>
        </member>
    </members>
</doc>
